"""
(?)* необходимо обеспечить проверку вводимых данных
-- > ?# какие данные по каким критериям надо проверять?
(+)* необходимо улучшить выводимые сообщения, чтобы было коротко и понятно
(+)* думаю все это для прототипа сгодится
(?)* думаю здесь должно быть две программы Клиент и Сервер
-- >  ?# не совсем понимаю что это такое клиент и сервер программы?
(+)* думаю необходимы реальные данные, это API - Биржи
-- >  +# в идеале брать данные с биржи, парсить как я понимаю это называется
(+)* думаю еще много чего нужно...
"""
# Список пар.
# -- >  т.к мы в России, у нас рубли RUB, в изначальный список добавлю некоторые рублёвые пары
pairs = [
	'EXM/RUB', 'SMART/RUB', 'XRP/RUB',
	'ALGO/RUB', 'BTT/RUB', 'DAI/RUB',
	'ONG/RUB', 'ONT/RUB', 'TRX/RUB',
    'USDT/RUB', 'XLM/RUB', 'LSK/RUB'
]
# -- >  ? любую валютную пару мы можем разбить на 2 валюты
# та которую покупают и вторая - на которую покупают
# Мы же тоже можем это сделать, после того как пользователь введёт название пары?
# пара x/y
# x = pairsell - первая валюта в паре
# у = pairbuy - вторая валюта в паре


# Иоформация о пользователе
user_info = {}

#? -- >  ты создал переменную которая является словарём
# и куда будут в последствии добавляться ключ и значение?

# Формируем сообщение
# Приветственное сообщение и первый запрос названия валютной пары
#? -- >  А что означают тройные ковычки? """...""" ?
message = """
 Привет, Я финансовый помошник. 
 Kоторый поможет сгенерировать ордера для биржи криптовалют.

 Для генерации ордеров необходимо будет ввести запрашиваемые
 программой данные.

 ЗАПРОС: 1
 Введите название торговой пары. 
"""
# Выводим сообщение
print(message)

# Вывод имеющихся пар
# -- > Пробегаешь по длине спика валютных пар и выводишь их по 4 в строчку
#? -- >  Не совсем понимаю этот момент - " {pair:<10s} "

for i in range( len(pairs) ):
	print(" {pair:<10s} ".format(pair=pairs[i]), end='')
	if (i + 1) % 4 == 0:
		print()

# Ввод названя пары + удалить пробелы
# В словаре user_info создаём ключ и присваиваем ему значение, которое введёт пользователь
# -- > не знаком с таким методом .strip()
user_info['pair_name'] = input('\n\n Пара: ').strip()

# Если пары нет в списке pairs, то добавляем
if user_info['pair_name'] not in pairs:
	pairs.append(user_info['pair_name'])

# ? -- > Здесь можно разбить пару на 2 составляющие валюты?
# Пока правда не знаю зачем, но это понадобится обращение к отдельной валюте из пары
# взять значение ключа 'pair_name',
# оно по идее является строкой,
# найти в этой строке "/",
# и создать 2 переменные, одной присвоить всё что до символа "/"
# второй переменной присваиваем всё что после "/"

# Формируем сообщение
message = """
 ЗАПРОС: 2
 Сколько вы готовы инвестировать в эту валютную пару в рублях?
"""
print(message)

# Ввод суммы
# В словаре user_info создаём следующий ключ
# и присваиваем ему значение, которое введёт пользователь
user_info['balance'] = int(input(' Сумма: '))

# Определяем статус пользователя
if user_info['balance'] < 11111:
	user_info['status'] = 'babyplay'

elif user_info['balance'] >= 11111 and user_info['balance'] < 55555:
	user_info['status'] = 'junior'

elif user_info['balance'] >= 55555 and user_info['balance'] < 111111:
	user_info['status'] = 'Segnior'

elif user_info['balance'] >= 111111 and user_info['balance'] < 1111111:
	user_info['status'] = 'VipSegnior'

elif user_info['balance'] >= 1111111:
	user_info['status'] = 'TraderKing'

# Формируем сообщение
message = """
 Ваш баланс: {balance} рублей.

 ЗАПРОС: 3
 Тип операции: Покупка введите BUY  или buy
               Продажа введите SELL или sell
""".format(balance=user_info['balance'])
# ?--> здесь я снова немного потерялся  .format(balance=user_info['balance'])

# Вывод баланса и предложение на дальнейшие действия
print(message)

# Ввод действия buy или sell + удалить пробелы
user_info['action'] = input(' Действие: ').strip()

print('\n ЗАПРОС: 4\n Введите биржевую цену ', end='')

# Ввод текущей цены buy или sell
if user_info['action'].lower() == 'buy':
	user_info['current_price'] = float(input('"ПОКУПКИ" на данный момент: '))

if user_info['action'].lower() == 'sell':
	user_info['current_price'] = float(input('"ПРОДАЖИ" на данный момент: '))

# Формируем сообщение
# -- > Я убрал Тип производимой операции , это в принципе необязательно расставлять
message = """
 Cобранные данные:
  Вы хотите торговать в валютной паре - {pair}
  Вы готовы инвестировать в неё       - {balance} рублей
  Ваш статус                          - {status}

 Подождите...
""".format(
		pair=user_info['pair_name'],
		status=user_info['status'],
		balance=user_info['balance'],
	)

# Вывод введенной информации
print(message)

# ОТЛИЧНАЯ ВСТУПИТЕЛЬНАЯ ЧАСТЬ ПРОГРАММЫ ,
# ГДЕ ПОЛЬЗОВАТЕЛЬ ВВЁЛ ДАННЫЕ. дальше должен происходить расчёт.
# Для расчёта нам необходимо знать минимально возможную величину сделки.
# эта информация может вводиться пользователем,
# но в идеале если валютная пара есть в программе,
# то эти данные также должны храниться в программе и быть привязанными к этой паре.
#
# Программа расчитывает сперва,
# сколько минимально возможных сделок можно осуществить
# по заданной цене current_price на имеющийся баланс balance
# minorders = balance/current_price
# округляем, отбросив дробную часть и получаем число - количество минимально возможных ордеров
# которые можно выставить на эту сумму balance
# далее в зависимости от числа ордеров, программа выберет шаг с которым будут выставляться ордера.
#
# мне немного сложно объяснять общими словами, но я бы мог это сделать на примере.
#
# для каждого статуса ('babyplay' - 'TraderKing'), будет свой формат расчёта и расстановки ордеров.
# также на алгоритм расчёта ордеров будет влиять цена валюты.
# вот данные с биржи, я сейчас подсчитал . Это будет наша область значений.
# рассмотрим пары, торгующиеся с рублём. их всего на бирже ексмо - 25 таких пар.
# я не поленюсь а выпишу для лучшего понимания и отсортирую по цене всё что торгуется с рублём

# 1) BTC/RUB   цена: 2950000 RUB за 1 BTC  минимальный объём покупки:
# 2) ETH/RUB   цена: 210100 RUB за 1 ETH  минимальный объём покупки:
# 3) BCH/RUB   цена: 58795 RUB за 1 BCH  минимальный объём покупки:
# 4) XMR/RUB   цена: 19254 RUB за 1 XMR минимальный объём покупки:
# 5) DASH/RUB   цена: 15717 RUB за 1 DASH  минимальный объём покупки:
# 6) LTC/RUB   цена: 15190 RUB за 1 LTC  минимальный объём покупки:
# 7) ZEC/RUB   цена: 11478 RUB за 1 ZEC минимальный объём покупки:
# 8) DCR/RUB   цена: 10921 RUB за 1 DCR  минимальный объём покупки:
# 9) ETC/RUB   цена: 5730  RUB за 1 ETC минимальный объём покупки: 0.1 ETC
# 10) NEO/RUB   цена: 4746 RUB за 1 NEO  минимальный объём покупки: 0.1 NEO
# 11) WAVES/RUB   цена: 1225  RUB за 1 WAVES минимальный объём покупки: 0.1 WAVES
# 12) LSK/RUB   цена: 309 RUB за 1 LSK  минимальный объём покупки: 1 LSK
# 13) XTZ/RUB   цена: 298 RUB за 1 XTZ минимальный объём покупки: 1 XTZ
# 14) ONT/RUB   цена: 86.45 RUB за 1 ONT минимальный объём покупки: 1 ONT
# 15) ALGO/RUB   цена: 75.76 RUB за 1 ALGO  минимальный объём покупки: 5 ALGO
# 16) XRP/RUB   цена: 75.67 RUB за 1 XRP минимальный объём покупки: 5 XRP
# 17) DAI/RUB   цена: 73.87 RUB за 1 DAI  минимальный объём покупки: 1 DAI
# 18) GUSD/RUB   цена: 73.68 RUB за 1 GUSD  минимальный объём покупки: 1 GUSD
# 19) USDT/RUB   цена: 73.66  RUB за 1 USDT минимальный объём покупки: 1 USDT
# 20) ONG/RUB   цена: 72.65 RUB за 1 ONG  минимальный объём покупки: 10 ONG
# 21) XLM/RUB   цена: 32.66 RUB за 1 XLM  минимальный объём покупки: 5 XLM
# 22) TRX/RUB   цена: 6.01  RUB за 1 TRX минимальный объём покупки: 50 TRX
# 23) EXM/RUB   цена: 3.35 RUB за 1 EXM  минимальный объём покупки: 1 EXM
# 24) SMART/RUB   цена: 0.74  RUB за 1 SMART минимальный объём покупки: 100 SMART
# 25) BTT/RUB   цена: 0.31 RUB за 1 BTT  минимальный объём покупки: 1000 BTT

# теперь бы мне хотелось для каждой пары расчитать
# сколько нужно денег чтобы расставить 10, 50, 100, 200, ... 1000 ордеров
# это просто мысли , буду пробывать сформулировать

